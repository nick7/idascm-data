{
  "$schema": "http://json-schema.org/draft-04/schema",
  "definitions": {
    "argument": {
      "type": "object",
      "properties": {
        "type": {
          "title": "High-level argument type",
          "$ref": "#/definitions/type"
        },
        "enum": {
          "type": "string",
          "title": "Enumeration unique name",
          "pattern": "^([A-Z0-9_]+)$"
        },
        "operand_type": {
          "title": "Override operand type",
          "description": "NOTE: Type informaton byte will not be read with this property.",
          "$ref": "#/definitions/operand_type"
        }
      },
      "required": [ "type" ],
      "additionalProperties": false
    },
    "command": {
      "description": "Single command definition",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/command_name"
        },
        "args": {
          "anyOf": [
            {
              "title": "Argument count",
              "description": "Short form for `[any, any, ...]`",
              "type": "integer",
              "minimum": -1,
              "maximum": 32
            },
            {
              "title": "Argument definition list",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "title": "Argument type",
                    "$ref": "#/definitions/type"
                  },
                  {
                    "title": "Argument definition",
                    "$ref": "#/definitions/argument"
                  }
                ]
              },
              "maxItems": 32
            }
          ]
        },
        "format": {
          "title": "INI Command Format",
          "description": "Community Notation - SannyBuilder",
          "pattern": "^([a-zA-Z 0-9_\\-\\.%+=<>*/:,|~&^]+)$"
        },
        "flags": {
          "description": "Command flag list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/command_flag"
          }
        },
        "desc": {
          "description": "Short command description",
          "type": "string"
        },
        "comment": {
          "description": "Any user text",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "command_name": {
      "title": "Command Name",
      "description": "Rockstar Notation - UPPERCASE",
      "type": "string",
      "pattern": "^([A-Z_0-9]+|\\{|\\})$"
    },
    "command_flag": {
      "anyOf":[
        {
          "const": "stop",
          "title": "Don't process next address (`CF_STOP`)."
        },
        {
          "const": "branch",
          "title": "Branch execution flow (`CF_JUMP`).",
          "description": "Requires `address`, `mission` or `script` type."
        },
        {
          "const": "call",
          "title": "GOSUB-like command (`CF_CALL`).",
          "description": "Requires `branch` flag."
        },
        {
          "const": "return",
          "title": "Return from function.",
          "description": " Required for proper IDA analysis."
        },
        {
          "const": "condition",
          "title": "Modifies condition flag"
        },
        {
          "const": "conditional",
          "title": "Uses condition flag"
        },
        {
          "const": "function_call",
          "title": "Advanced function call with parameters and variable stack",
          "description": "NOTE: GTA:LCS and GTA:VCS only"
        },
        {
          "const": "switch",
          "title": "Switch idiom",
          "description": "NOTE: GTA:SA only"
        },
        {
          "const": "dependent",
          "title": "This command depends on previous one",
          "description": "(e.g. `SWITCH_CONTINUED`)"
        },
        {
          "const": "unsupported",
          "title": "No inplementation provided",
          "description": "Will crash execution process."
        },
        {
          "const": "macro",
          "title": "Compiler only high-level construction (e.g. variable declaration)"
        },
        {
          "const": "cleo",
          "description": "CLEO library extension"
        }
      ]
    },
    "operand_type": {
      "enum": [
        "unknown",
        "none",
        "local",
        "global",
        "timer",
        "local_array",
        "global_array",
        "string",
        "int0",
        "int8",
        "int16",
        "int32",
        "int64",
        "float0",
        "float8",
        "float16",
        "float16i",
        "float24",
        "float32",
        "string8",
        "string16",
        "string128"
      ]
    },
    "type": {
      "anyOf": [
        {
          "const": "unknown",
          "title": "Void type",
          "description": "This type should not be used directly."
        },
        {
          "const": "any",
          "title": "Any type",
          "description": "Default behaviour (acceptable in most cases)."
        },
        {
          "enum": [ "integer", "int" ],
          "title": "Variable size signed integer"
        },
        {
          "enum": [ "real", "float" ],
          "title": "Variable size floating point"
        },
        {
          "enum": [ "string" ],
          "title": "Any string type",
          "description": "NOTE: Explicit `operand_type` is required for GTA3 and GTA:VC."
        },
        {
          "enum": [ "variadic", "..." ],
          "title": "Variadic parameter list (ending with operand_type::none)"
        },
        {
          "const": "address",
          "title": "Subroutine or label address",
          "description": "Requires `branch` flag (Example: `GOTO` command)"
        },
        {
          "const": "mission",
          "title": "Mission ID (segment)"
        },
        {
          "const": "script",
          "title": "Streamable script ID"
        },
        {
          "const": "model",
          "title": "Model Identifier",
          "description": "Any in-game model ID"
        },
        {
          "const": "handle",
          "title": "Resource handle",
          "description": "Any in-game object (e.g. player, car, pickup)"
        },
        {
          "enum": [ "constant", "const" ],
          "title": "Immediate value argument",
          "description": "This argument is NOT a variable."
        },
        {
          "const": "variable",
          "title": "Any variable (local or global)",
          "description": "This argument can be changed by command"
        },
        {
          "const": "global",
          "title": "Abstract global variable (memory reference)"
        },
        {
          "const": "local",
          "title": "Abstract local variable (IDA register)"
        },
        {
          "enum": [ "constant_integer", "const_int" ],
          "title": "Immediate value integer"
        },
        {
          "enum": [ "constant_real", "const_float" ],
          "title": "Immediate value floating-point"
        },
        {
          "enum": [ "constant_string", "const_string" ],
          "title": "Immediate value string"
        },
        {
          "enum": [ "variable_integer", "variable_int" ],
          "title": "Any integer variable (local or global)"
        },
        {
          "enum": [ "global_integer", "global_int" ],
          "title": "Global integer variable"
        },
        {
          "enum": [ "local_integer", "local_int" ],
          "title": "Local integer variable"
        },
        {
          "enum": [ "variable_real", "variable_float" ],
          "title": "Any floating-point variable (local or global)"
        },
        {
          "enum": [ "global_real", "global_float" ],
          "title": "Global floating-point variable"
        },
        {
          "enum": [ "local_real", "local_float" ],
          "title": "Local floating-point variable"
        },
        {
          "const": "variable_string",
          "description": "Any string variable (local or global) (GTA:SA)"
        },
        {
          "const": "global_string",
          "title": "Global string variable (GTA:SA)"
        },
        {
          "const": "local_string",
          "title": "Local string variable (GTA:SA)"
        }
      ]
    },
    "meta": {
      "type": "object",
      "description": "Optional meta-information",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "type": "string"
        }
      }
    },
    "version": {
      "anyOf":[
        {
          "enum": [ "gta3", "gta3_ps2", "gta3_xbox", "gta3_pc", "gta3_pc_cleo", "gta3_anniversary", "gta3_definitive", "gta3_custom" ],
          "description": "Grand Theft Auto III"
        },
        {
          "enum": [ "gtavc", "gtavc_ps2", "gtavc_xbox", "gtavc_pc", "gtavc_pc_cleo", "gtavc_anniversary", "gtavc_definitive", "gtavc_custom" ],
          "description": "Grand Theft Auto: Vice City"
        },
        {
          "enum": [ "gtasa", "gtasa_ps2", "gtasa_xbox", "gtasa_pc", "gtasa_pc_cleo", "gtasa_anniversary", "gtasa_definitive", "gtasa_custom" ],
          "description": "Grand Theft Auto: San Andreas"
        },
        {
          "enum": [ "gtalcs", "gtalcs_ps2", "gtalcs_psp", "gtalcs_anniversary" ],
          "description": "Grand Theft Auto: Liberty City Stories"
        },
        {
          "enum": [ "gtavcs", "gtavcs_ps2", "gtavcs_psp" ],
          "description": "Grand Theft Auto: Vice City Stories"
        }
      ]
    }
  },
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string"
    },
    "meta": {
      "$ref": "#/definitions/meta"
    },
    "version": {
      "description": "This configuration unique version",
      "$ref": "#/definitions/version"
    },
    "parent": {
      "description": "Inherit another configuration",
      "$ref": "#/definitions/version"
    },
    "commands": {
      "description": "Command definitions (opcodes as keys)",
      "type": "object",
      "patternProperties": {
        "^(\\d+|0x[\\da-fA-F]+)$": {
          "$ref": "#/definitions/command"
        }
      }
    },
    "enums": {
      "type": "object",
      "patternProperties": {
        "^([A-Z0-9_]+)$": {
          "anyOf":[
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^([A-Z0-9_]+)$"
              }
            },
            {
              "type": "object",
              "patternProperties": {
                "^([A-Z0-9_]+)$": {
                  "type": "integer"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "debug": {
      "type": "object"
    }
  },
  "required": [ "version" ],
  "additionalProperties": false
}
